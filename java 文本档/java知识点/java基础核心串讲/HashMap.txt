HashMap：数组加链表组合构成的数据结构

jdk8之前使用头插会改变链表的上的顺序，但是如果使用尾插，在扩容时会保持链表元素原本的顺序就不会出现链表成环的问题了。

jdk7在多线程操作hashmap时可能引起死循环，原因是扩容转移后前后链表顺序倒置，在转移过程中修改了原来链表中节点的引用关系。

jdk8在同样的前提下就不会出现一样的问题，原因是在扩容转移后前后链表的顺序不变，保持之前节点的引用关系。

HashMap在多线程会出现线程安全问题，因为put和get方法都没有加同步锁，所以可能会出现这个线程put的数据与另外一个线程get的值不是同一个。

HashMap初始长度为16，为了位运算的方便，位与运算比算术运算的效率高了很多，之所以选择16，是为了服务将key映射到index的算法。

index的算法：计算公式：index=HashCode（key） & （Length - 1）

使用16的原因，因为在使用不是2的幂的数字的时候，Length-1的值是所有二进制位全为1，这种情况下，index的结果等同于HashCode后几位的值。
只要输入的hashCode本身分布均匀，hash算法结果就是均匀的。
这是为了实现均匀分布。

equals和hashCode方法：
  因为在java中，所有对象都是继承Object类。Object类有两个方法equals()和hashCode()，这两个方法都是用来比较两个对象是否相等的。

  在未重写equals方法我们继承的是Object的equals方法，那里的equals是比较两个对象的内存地址，显然我们new的两个新对象，肯定地址值不会是一样的
     对于值对象，==比较的是两个对象的值  一般是基本类型
     对于引用对象，比较的是两个对象的地址  一般是引用类型

  我们去get的时候，就是根据key去hash然后计算出index，所以当我们重写equals的时候也需重写hashCode不然可能会出现不一样的对象一样的hashCode值。

  hashTable是直接在方法上锁，并发度很低，最多同时允许一个线程访问。

  hashMap扩容机制：
    capacity： HashMap当前长度
    loadFactor：负载因子，默认值0.75f

  扩容步骤：
    扩容：创建一个新的Entry空数组，长度是原数组的2倍
    ReHash：遍历源Entry数组，把所有的Entry数组重新Hash到新数组中去。
 
  什么是HashMap的容量？
    在HashMap中，有两个比较容易混淆的关键字段：size和capacity，这其中capacity就是map的容量，而size我们称之为Map中的元素个数。 
    capacity是总容量，size是已经存储的个数。

  容量与哈希？
    容量就是一个HashMap中"桶"的个数，那么，当我们想要往一个HashMap中put一个元素的时候，需要通过一定的算法计算出应该把他放到哪个桶中，这个过程就叫做哈希，对应的就是hashMap中的hash方法。

  Hash的实现？
    具体实现：由两个方法int hash(Object k)和int indexFor(int h ，int length)来实现。
    hash： 该方法主要是将Object转换成一个整型。
    indexFor：该方法主要是将hash生成的整型转换成链表数组中的下标。

  indexFor方法其实就是将hashCode换成链表数组的下标。其中的两个参数h表示元素的hashcode值，length表示HashMap的容量。

  h & （length-1）就是取模。java之所以使用位运算（&）代替取模运算（%），最主要的考虑就是效率。

  位运算（&）效率要比代替取模运算（%）高很多，主要原因是位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。但是要求HashMap的容量一定要是2^n。


    指定容量初始化
   当我们通过HashMap（int initialCapacity）设置初始容量的时候，HashMap并不一定会直接采用我们传入的数值，而是经过计算，得到一个新值，目的为了提高hash的效率。
   总之，HashMap根据用户传入的初始化容量，利用无符号右移和按位或运算等方式计算出第一个大于该数的2的幂。


  总结：
   1.hashMap作为一种数据结构，元素在put的过程中需要进行hash运算，目的是计算出该元素放在hashMap中的具体位置。
   2.hash运算的过程其实就是对目标元素的key进行hashcode，再对Map的容量进行取模，而JDK的工程师为了提升取模的效率，使用位运算代替了取模运算，这就要求Map的容量一定得是2的幂。
   3.为了保证在任何情况下Map的容量都是2的幂，HashMap会把一个2的幂的数作为初始容量，另外在扩容的时候，也是成倍扩容。

